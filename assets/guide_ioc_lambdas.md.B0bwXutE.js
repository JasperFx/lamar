import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.B2AeMXkx.js";const d=JSON.parse('{"title":"Building Objects with Lambdas","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/lambdas.md","filePath":"guide/ioc/lambdas.md"}'),t={name:"guide/ioc/lambdas.md"};function l(p,s,h,o,r,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="building-objects-with-lambdas" tabindex="-1">Building Objects with Lambdas <a class="header-anchor" href="#building-objects-with-lambdas" aria-label="Permalink to &quot;Building Objects with Lambdas&quot;">â€‹</a></h1><p>Instead of allowing Lamar to build objects directly, you can give a Lamar <code>Container</code> a <a href="https://msdn.microsoft.com/en-us/library/bb397687.aspx" target="_blank" rel="noreferrer">Lambda function</a> that can be called to create an object at resolution time.</p><p>Using NHibernate&#39;s <a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/ISession.cs" target="_blank" rel="noreferrer"><code>ISession</code></a> as an example of an object that typically has to be built by using an <a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/ISessionFactory.cs" target="_blank" rel="noreferrer"><code>ISessionFactory</code></a> object:</p><p><a id="snippet-sample_nhibernate-isession-factory"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ISession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ISessionFactory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ISession</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Samples/TalkSamples.cs#L52-L59" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nhibernate-isession-factory" title="Start of snippet">anchor</a></sup></p><p>If we want to allow Lamar to control the <code>ISession</code> lifecycle and creation, we have to register a Lambda function as the means of creating <code>ISession</code> as shown in this example below:</p><p><a id="snippet-sample_SessionFactoryRegistry"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SessionFactoryRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Registry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Let&#39;s not worry about how ISessionFactory is built</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // in this example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SessionFactoryRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ISessionFactory</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ISessionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Build ISession with a lambda:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ISession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Build ISession from ISessionFactory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // To resolve ISession, I first pull out</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ISessionFactory from the IContext and use that</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // to build a new ISession. </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ISessionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Samples/TalkSamples.cs#L61-L80" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_SessionFactoryRegistry" title="Start of snippet">anchor</a></sup></p><p>Lambda registrations can be done with any of the following four signatures:</p><ol><li><code>(Expression&lt;Func&lt;IContext, T&gt;&gt; builder)</code> -- a simple, one line Lambda to build <code>T</code> using <code>IContext</code></li><li><code>(Expression&lt;Func&lt;T&gt;&gt; func)</code> -- a simple, one line Lambda to build <code>T</code></li><li><code>(string description, Func&lt;IContext, T&gt; builder)</code> -- use <code>IContext</code> in your builder Lambda with a user-supplied description for diagnostics</li><li><code>(string description, Func&lt;T&gt; builder)</code> -- Supply a complex <code>Func&lt;T&gt;</code> with a user-supplied description for diagnostics</li></ol><p><strong>Be very wary of the difference between legal <code>Expression&#39;s</code> and more complicated Lambda&#39;s that will need to be <code>Func&#39;s</code>.</strong> It likely doesn&#39;t matter to you the user, but it unfortunately does to Lamar and .NET itself. If you need to use a more complex <code>Func</code>, you will have to supply a diagnostic description.</p>`,13)]))}const g=i(t,[["render",l]]);export{d as __pageData,g as default};
