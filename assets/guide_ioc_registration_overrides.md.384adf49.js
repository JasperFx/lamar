import{_ as s,c as a,o as n,a as e}from"./app.8aee9f9c.js";const C=JSON.parse('{"title":"Overriding Service Registrations","description":"","frontmatter":{"title":"Overriding Service Registrations","editLink":true},"headers":[],"relativePath":"guide/ioc/registration/overrides.md"}'),o={name:"guide/ioc/registration/overrides.md"},l=e(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There is the new <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.testhost.webhostbuilderextensions.configuretestservices?view=aspnetcore-5.0" target="_blank" rel="noreferrer">ConfigureTestServices()</a> method in <a href="http://ASP.Net" target="_blank" rel="noreferrer">ASP.Net</a> Core 5 that purports to do the same thing, but the Lamar team believes that the mechanism shown here will be more &quot;correct&quot; and also allows you to use Lamar specific features.</p></div><p>A new feature in Lamar v5.1 is a long requested way to reliably override service registrations in .Net Core applications bootstrapped by the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-5.0" target="_blank" rel="noreferrer">generic host builder</a>.</p><p>Let&#39;s say that in test automation scenarios you&#39;d like to override some of the services in your normal application with testing stubs or to overwrite some kind of configuration. What you need to do is to take the <code>IHostBuilder</code> or <code>IWebHostBuilder</code> <strong>just as it is built by your application&#39;s bootstrapping</strong>, but apply service registrations that take precedence in Lamar over other registrations. That&#39;s a little trickier than you might think because the <code>HostBuilder</code> / <code>WebHostBuilder</code> applies service registrations in different places during bootstrapping, with registrations from <code>Startup.ConfigureServices()</code> taking precedence in normal usage.</p><p>That&#39;s where the new <code>OverrideServices()</code> extension method comes into play. As an example, let&#39;s say that in a test harness we want to just replace the normal <a href="http://ASP.Net" target="_blank" rel="noreferrer">ASP.Net</a> Core <code>IServer</code> service with a fake implementation called <code>FakeServer</code>. The following is the code to do exactly that:</p><p><a id="snippet-sample_usage_of_overrides"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sample_usage_of_overrides</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Program</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateHostBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Empty</span><span style="color:#89DDFF;">&lt;string&gt;())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// This is our chance to make service overrides</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OverrideServices</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IServer</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FakeServer</span><span style="color:#89DDFF;">&gt;();</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">host</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    host</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetRequiredService</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IServer</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FakeServer</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.AspNetCoreTests/integration_with_aspnetcore.cs#L179-L196" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_usage_of_overrides" title="Start of snippet">anchor</a></sup></p><p>In the code above, the lambda passed into the <code>OverrideServices()</code> method is executed in the Lamar <code>Container</code> initialization <strong>after all other other explicit registrations and policies have been combined</strong>. In effect, this means that any registrations -- or removal of registrations -- in the <code>OverrideServices()</code> call are guaranteed to be processed last and reliably override any original registrations.</p><p>The <code>OverrideServices()</code> extension is only available for <code>IHostBuilder</code>.</p><p>If you are needing to create a test client or server to run integration tests you will need to use the <code>ConfigWebHost()</code> method of <code>IHostBuilder</code> to specifically create a test server, otherwise using <code>host.GetTestServer()</code> or <code>host.GetTestClient()</code> will throw a <a href="https://github.com/dotnet/aspnetcore/issues/14873" target="_blank" rel="noreferrer">System.InvalidCastException</a>. Additionally you&#39;ll want to use <code>StartHost()</code> rather than <code>Build()</code></p><p>For example:</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sample_of_testing_with_client</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Arrange</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">builder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Program</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateHostBuilder</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Empty</span><span style="color:#89DDFF;">&lt;string&gt;())</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Make service overrides</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OverrideServices</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">s</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">             s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IServer</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">FakeServer</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ConfigureWebHost</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">webHost</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Add TestServer</span></span>
<span class="line"><span style="color:#A6ACCD;">            webHost</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseTestServer</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Start the test server</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">host</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> builder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">StartAsync</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Get a test client and do anything you need here like adding headers</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">client</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> host</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetTestClient</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Act</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">response</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetAsync</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">api/controller/action</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">content</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">await</span><span style="color:#A6ACCD;"> response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Content</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ReadAsStringAsync</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Assert</span></span>
<span class="line"><span style="color:#A6ACCD;">    Assert</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Equal</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StatusCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> StatusCodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Status200OK</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,12),t=[l];function p(r,c,i,F,y,D){return n(),a("div",null,t)}const d=s(o,[["render",p]]);export{C as __pageData,d as default};
