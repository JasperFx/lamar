import{_ as s,c as n,o as a,a as l}from"./app.5b13aa3a.js";const C=JSON.parse('{"title":"Lamar and IDisposable/IAsyncDisposable","description":"","frontmatter":{},"headers":[{"level":2,"title":"IAsyncDisposable","slug":"iasyncdisposable","link":"#iasyncdisposable","children":[]},{"level":2,"title":"Singletons","slug":"singletons","link":"#singletons","children":[]},{"level":2,"title":"Nested Containers","slug":"nested-containers","link":"#nested-containers","children":[]},{"level":2,"title":"Transients","slug":"transients","link":"#transients","children":[]}],"relativePath":"guide/ioc/disposing.md"}'),e={name:"guide/ioc/disposing.md"},p=l(`<h1 id="lamar-and-idisposable-iasyncdisposable" tabindex="-1">Lamar and IDisposable/IAsyncDisposable <a class="header-anchor" href="#lamar-and-idisposable-iasyncdisposable" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Lamar v7.0 added support for <code>IAsyncDisposable</code> handling. Finally.</p></div><p>One of the main reasons to use an IoC container is to offload the work of disposing created objects at the right time in the application scope. Sure, it&#39;s something you should be aware of, but developers are less likely to make mistakes if that&#39;s just handled for them. To simplify the usage of <code>IDisposable</code> and <code>IAsyncDisposable</code>. In summary, Lamar tracks all objects it creates <strong>in the container that created the object</strong> that implements either <code>IDisposable</code> <strong>or</strong> <code>IAsyncDisposable</code>, and these tracked objects are disposed when the creating container is disposed.</p><h2 id="iasyncdisposable" tabindex="-1">IAsyncDisposable <a class="header-anchor" href="#iasyncdisposable" aria-hidden="true">#</a></h2><p>The Lamar <code>IContainer</code> itself, and all nested containers (scoped containers in .Net DI nomenclature) implement both <code>IDisposable</code> and <code>IAsyncDisposable</code>. It is <strong>not</strong> necessary to call both <code>Dispose()</code> and <code>DisposeAsync()</code> as either method will dispose all tracked <code>IDisposable</code> / <code>IAsyncDisposable</code> objects when either method is called.</p><p><a id="snippet-sample_calling_async_disposable"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Asynchronously disposing the container</span></span>
<span class="line"><span style="color:#FFCB6B;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DisposeAsync</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/disposing_container.cs#L409-L414" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_calling_async_disposable" title="Start of snippet">anchor</a></sup></p><p>The following table explains what method is called on a tracked object when the creating container is disposed:</p><table><thead><tr><th>If an object implements...</th><th>Container.Dispose()</th><th>Container.DisposeAsync()</th></tr></thead><tbody><tr><td><code>IDisposable</code></td><td><code>Dispose()</code></td><td><code>Dispose()</code></td></tr><tr><td><code>IAsyncDisposable</code></td><td><code>DisposeAsync().GetAwaiter().GetResult()</code></td><td><code>DisposeAsync()</code></td></tr><tr><td><code>IDisposable</code> and <code>IAsyncDisposable</code></td><td><code>DisposeAsync()</code></td><td><code>DisposeAsync()</code></td></tr></tbody></table><p>If any objects are being created by Lamar that only implement <code>IAsyncDisposable</code>, it is probably best to strictly use <code>Container.DisposeAsync()</code> to avoid any problematic mixing of sync and async code.</p><h2 id="singletons" tabindex="-1">Singletons <a class="header-anchor" href="#singletons" aria-hidden="true">#</a></h2><p>This one is easy, any object marked as the <em>Singleton</em> lifecycle that implements <code>IDisposable</code> is disposed when the root container is disposed:</p><p><a id="snippet-sample_singleton-in-action"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">singletons_are_disposed_when_the_container_is_disposed</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ForSingletonOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DisposableSingleton</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// As a singleton-scoped object, every request for DisposableSingleton</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// will return the same object</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DisposableSingleton</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeSameAs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DisposableSingleton</span><span style="color:#89DDFF;">&gt;());</span></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeSameAs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DisposableSingleton</span><span style="color:#89DDFF;">&gt;());</span></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeSameAs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DisposableSingleton</span><span style="color:#89DDFF;">&gt;());</span></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeSameAs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">DisposableSingleton</span><span style="color:#89DDFF;">&gt;());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeFalse</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// now, dispose the Container</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Dispose</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// the SingletonThing scoped object should be disposed</span></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/lifecycle_creation.cs#L22-L48" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_singleton-in-action" title="Start of snippet">anchor</a></sup></p><h2 id="nested-containers" tabindex="-1">Nested Containers <a class="header-anchor" href="#nested-containers" aria-hidden="true">#</a></h2><p>As discussed in <a href="/lamar/guide/ioc/nested-containers.html">nested containers</a>, any transient or container-scoped object that implements <code>IDisposable</code> and is created by a nested container will be disposed as the nested container is disposed:</p><p><a id="snippet-sample_nested-disposal"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nested_container_disposal</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// A SingletonThing scoped service</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ForSingletonOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColorCache</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ColorCache</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// A transient scoped service</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColor</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Green</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// An AlwaysUnique scoped service</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddTransient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Purple</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddTransient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Blue</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">ColorCache</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Green</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nestedGreen</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Blue</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nestedBlue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Purple</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nestedPurple</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nested</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetNestedContainer</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// SingletonThing&#39;s are really built by the parent</span></span>
<span class="line"><span style="color:#A6ACCD;">        singleton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColorCache</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ColorCache</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        nestedGreen </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColor</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Green</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        nestedBlue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Blue</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        nestedPurple </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Purple</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Transients created by the Nested Container</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// are disposed</span></span>
<span class="line"><span style="color:#A6ACCD;">    nestedGreen</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    nestedBlue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Unique&#39;s created by the Nested Container</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// are disposed</span></span>
<span class="line"><span style="color:#A6ACCD;">    nestedPurple</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// NOT disposed because it&#39;s owned by</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// the parent container</span></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeFalse</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/nested_container.cs#L59-L112" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nested-disposal" title="Start of snippet">anchor</a></sup><a id="snippet-sample_nested-disposal-1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nested_container_disposal</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// A SingletonThing scoped service</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ForSingletonOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColorCache</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ColorCache</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// A transient scoped service</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColor</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Green</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// An AlwaysUnique scoped service</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Purple</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">AlwaysUnique</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">ColorCache</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Green</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nestedGreen</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Blue</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nestedBlue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Purple</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nestedPurple</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nested</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetNestedContainer</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// SingletonThing&#39;s are really built by the parent</span></span>
<span class="line"><span style="color:#A6ACCD;">        singleton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColorCache</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ColorCache</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        nestedGreen </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IColor</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Green</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        nestedBlue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Blue</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        nestedPurple </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Purple</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Transients created by the Nested Container</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// are disposed</span></span>
<span class="line"><span style="color:#A6ACCD;">    nestedGreen</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    nestedBlue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Unique&#39;s created by the Nested Container</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// are disposed</span></span>
<span class="line"><span style="color:#A6ACCD;">    nestedPurple</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// NOT disposed because it&#39;s owned by</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// the parent container</span></span>
<span class="line"><span style="color:#A6ACCD;">    singleton</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasDisposed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeFalse</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/nested_containers.cs#L121-L170" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nested-disposal-1" title="Start of snippet">anchor</a></sup></p><h2 id="transients" tabindex="-1">Transients <a class="header-anchor" href="#transients" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This behavior is different from StructureMap. Be aware of this, or you may be vulnerable to memory leaks.</p></div><p>Objects that implement <code>IDisposable</code> are tracked by the container that creates them and will be disposed whenever that container itself is disposed.</p>`,26),o=[p];function t(c,r,F,D,i,y){return a(),n("div",null,o)}const d=s(e,[["render",t]]);export{C as __pageData,d as default};
