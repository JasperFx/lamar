import{_ as s,c as e,o as n,a}from"./app.5b13aa3a.js";const A=JSON.parse('{"title":"Service Lifetimes","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/lifetime.md"}'),l={name:"guide/ioc/lifetime.md"},o=a(`<h1 id="service-lifetimes" tabindex="-1">Service Lifetimes <a class="header-anchor" href="#service-lifetimes" aria-hidden="true">#</a></h1><p>Lamar&#39;s service lifetime support exactly reflects the behavior of the <a href="http://ASP.Net" target="_blank" rel="noreferrer">ASP.Net</a> Core DI container, as <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.0#service-lifetimes-and-registration-options" target="_blank" rel="noreferrer">described in this article</a>. This behavior is different than the older <a href="http://structuremap.github.io/object-lifecycle/" target="_blank" rel="noreferrer">StructureMap lifecycle logic</a>.</p><p>The supported life-cycles are:</p><ol><li><code>Singleton</code> -- Only one object instance is created for the entire application</li><li><code>Scoped</code> -- Only one object instance is created for a container, whether that is the root container or a scoped (nested) container. This maps to StructureMap&#39;s <code>ContainerScoped</code> lifecycle</li><li><code>Transient</code> -- A new object instance is created for every single request, including dependencies. This behavior is <strong>not consistent</strong> with StructureMap&#39;s old <code>Transient</code> and maps to StructureMap&#39;s old <code>AlwaysUnique</code> lifecycle</li></ol><p>There is no equivalent in Lamar to StructureMap&#39;s version of <code>Transient</code> or the rarely used <code>ThreadLocal</code> lifecycle. <code>HttpContext</code> related scopes are no longer supported, with the assumption that <code>Scoped</code> is a useful replacement for HTTP request scoping of services.</p><p>Here are some sample usages of registering services with a lifetime:</p><p><a id="snippet-sample_lifetimeregistry"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">LifetimeRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServiceRegistry</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">LifetimeRegistry</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Lifetimes the ASP.Net Core way</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// The registration methods are all extension</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// methods, so hence, &quot;this.&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">this</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddTransient</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWidget</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AWidget</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">this</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddSingleton</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IClock</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Clock</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">this</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddScoped</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IUnitOfWork</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UnitOfWork</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Lifetimes the old StructureMap way</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Transient is the default</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWidget</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AWidget</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IClock</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Clock</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Singleton</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">ForSingletonOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IClock</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Clock</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IUnitOfWork</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UnitOfWork</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Scoped</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Samples/Lifetimes.cs#L7-L36" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_lifetimeregistry" title="Start of snippet">anchor</a></sup></p>`,9),t=[o];function p(c,r,i,F,y,D){return n(),e("div",null,t)}const C=s(l,[["render",p]]);export{A as __pageData,C as default};
