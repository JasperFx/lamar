import{_ as s,c as a,o as n,a as e}from"./app.8aee9f9c.js";const h=JSON.parse('{"title":"Lamar Diagnostics","description":"","frontmatter":{},"headers":[{"level":2,"title":"Validating the Container Configuration","slug":"validating-the-container-configuration","link":"#validating-the-container-configuration","children":[]},{"level":2,"title":"Analyzing the Lamar Configuration","slug":"analyzing-the-lamar-configuration","link":"#analyzing-the-lamar-configuration","children":[]},{"level":2,"title":"Type Scanning Diagnostics","slug":"type-scanning-diagnostics","link":"#type-scanning-diagnostics","children":[]},{"level":2,"title":"Programmatic Diagnostics","slug":"programmatic-diagnostics","link":"#programmatic-diagnostics","children":[]}],"relativePath":"guide/ioc/diagnostics/index.md"}'),o={name:"guide/ioc/diagnostics/index.md"},l=e(`<h1 id="lamar-diagnostics" tabindex="-1">Lamar Diagnostics <a class="header-anchor" href="#lamar-diagnostics" aria-hidden="true">#</a></h1><p>Like StructureMap before it, one of Lamar&#39;s big differentiators from other IoC tools is its strong support for built in diagnostic tools.</p><p>The <code>Lamar.Diagnostics</code> NuGet library can be used to expose all of Lamar&#39;s diagnostic capabilities to the command line of your .Net Core or .Net 5.0 systems. To get started, just add a NuGet dependency to <code>Lamar.Diagnostics</code> to your application. This package relies on the .Net command line integration from <a href="https://jasperfx.github.io" target="_blank" rel="noreferrer">Oakton</a>, so you&#39;ll need to set up Oakton as shown in this sample <code>Program.Main()</code> method:</p><p><a id="snippet-sample_using-lamar-diagnostics"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">&lt;int&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Main</span><span style="color:#89DDFF;">(string[]</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">args</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Start up your HostBuilder as normal</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HostBuilder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UseLamar</span><span style="color:#89DDFF;">((</span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">services</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// This adds a Container validation</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// to the Oakton &quot;check-env&quot; command</span></span>
<span class="line"><span style="color:#A6ACCD;">            services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CheckLamarConfiguration</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// And the rest of your application&#39;s</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// DI registrations.</span></span>
<span class="line"><span style="color:#A6ACCD;">            services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IncludeRegistry</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TestClassRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// This one was problematic with oddball type names,</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// so it&#39;s in our testing</span></span>
<span class="line"><span style="color:#A6ACCD;">            services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddHttpClient</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Call this method to start your application</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// with Oakton handling the command line parsing</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// and delegation</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RunOaktonCommands</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarDiagnosticsWithNetCore3Demonstrator/Program.cs#L15-L40" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-lamar-diagnostics" title="Start of snippet">anchor</a></sup></p><p>Once the <code>Lamar.Diagnostics</code> NuGet is installed to your application and you&#39;ve opted into Oakton to handle command line options, typing this command at the root of your project will show all the installed commands:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">help</span></span>
<span class="line"></span></code></pre></div><p>If <code>Lamar.Diagnostics</code> is installed, you should see three lamar related commands as shown below:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">---------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Available</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commands:</span></span>
<span class="line"><span style="color:#FFCB6B;">---------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">check-env</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Execute</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">environment</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checks</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">against</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">application</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">describe</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Writes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">description</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">running</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">application...</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">help</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">list</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">available</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commands</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">lamar-scanning</span><span style="color:#A6ACCD;"> -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Runs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Lamar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s type scanning diagnostics</span></span>
<span class="line"><span style="color:#C3E88D;">  lamar-services -&gt; List all the registered Lamar services</span></span>
<span class="line"><span style="color:#C3E88D;">  lamar-validate -&gt; Runs all the Lamar container validations</span></span>
<span class="line"><span style="color:#C3E88D;">              run -&gt; Runs the configured AspNetCore application</span></span>
<span class="line"><span style="color:#C3E88D;">---------------------------------------------------------------------------------------------</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>All the diagnostic commands expose an <code>-e</code> flag to control the host environment name of the running application.</p></div><h2 id="validating-the-container-configuration" tabindex="-1">Validating the Container Configuration <a class="header-anchor" href="#validating-the-container-configuration" aria-hidden="true">#</a></h2><p>To validate the Lamar configuration of your system, use this command from the root of your project:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-validate</span></span>
<span class="line"></span></code></pre></div><p>Running that command is going to:</p><ol><li>Bootstrap your application which sets up the Lamar container</li><li>Checks that every service registration can find all necessary dependencies</li><li>If running in the default &quot;full&quot; mode, tries to build all known registrations one by one</li><li>If running in the default &quot;full&quot; mode, executes all the <a href="/lamar/guide/ioc/diagnostics/environment-tests.html">Lamar environment checks</a> in your system</li><li>Write out the stack traces of any and all exceptions that Lamar encounters</li></ol><p>If everything checks out, you&#39;ll get this friendly output in green:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">Lamar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">registrations</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">are</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">good!</span></span>
<span class="line"></span></code></pre></div><p>Otherwise, you&#39;re going to get a whole lot of .Net exception stack traces with explanatory text about what registrations or environment tests failed.</p><p>The command itself will return a non zero exit code, so if <code>lamar-validate</code> is used within your automated build, it will fail your build if the validation fails <strong>by design</strong>.</p><p>To run a faster check of only the configuration, use the flag shown below:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-validate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ConfigOnly</span></span>
<span class="line"></span></code></pre></div><h2 id="analyzing-the-lamar-configuration" tabindex="-1">Analyzing the Lamar Configuration <a class="header-anchor" href="#analyzing-the-lamar-configuration" aria-hidden="true">#</a></h2><p>The old Lamar/StructureMap <em>WhatDoIHave()</em> diagnostic report is available from the command line in an enhanced command like this:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span></span>
<span class="line"></span></code></pre></div><p>This command makes heavy usage of the <a href="https://spectresystems.github.io/spectre.console" target="_blank" rel="noreferrer">Spectre.Console</a> library to format the output in a much more readable way than the old, purely textual version.</p><p>The output is somewhat ellided to eliminate some of the noise registrations added by <code>HostBuilder</code> like <code>IOptions&lt;T&gt;</code> or <code>ILogger&lt;T&gt;</code>. To see <strong>everything</strong>, use the verbose flag:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>All service registration filtering is done by the <strong>service type</strong> rather than the <strong>implementation type</strong></p></div><p>To filter the results to zero in on specific type registrations, you can filter by assembly:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--assembly</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YourAssemblyName</span></span>
<span class="line"></span></code></pre></div><p>or by namespace (and this is inclusive):</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--namespace</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">NamespaceName</span></span>
<span class="line"></span></code></pre></div><p>or by a specific type name:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--type</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">YourTypeName</span></span>
<span class="line"></span></code></pre></div><p>The filtering by type name is case insensitive, and looks for type names that contain your filter. So looking for <code>--type options</code> will find every possible registration of <code>IOptions&lt;T&gt;</code> for example.</p><p>To get more detailed information about exactly how Lamar is building these service registrations, use this option:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build-plans</span></span>
<span class="line"></span></code></pre></div><p>Lastly, you can save off the output of the <code>lamar-services</code> command to either a text file:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build-plans</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">services.txt</span></span>
<span class="line"></span></code></pre></div><p>or keep the formatting in HTML by naming the file with either an <code>htm</code> or <code>html</code> file extension:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-services</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--build-plans</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--file</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">services.htm</span></span>
<span class="line"></span></code></pre></div><h2 id="type-scanning-diagnostics" tabindex="-1">Type Scanning Diagnostics <a class="header-anchor" href="#type-scanning-diagnostics" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The type scanning mechanics are somewhat brittle when there are dependency issues in your application, and this command can help you spot where problems may be occurring.</p></div><p>The <a href="/lamar/guide/ioc/diagnostics/type-scanning.html">type scanning</a> can be accessed at the command line with this command:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">dotnet</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lamar-scanning</span></span>
<span class="line"></span></code></pre></div><h2 id="programmatic-diagnostics" tabindex="-1">Programmatic Diagnostics <a class="header-anchor" href="#programmatic-diagnostics" aria-hidden="true">#</a></h2><p>The older, programmatic usages of Lamar diagnostics are described in other sections.</p>`,48),t=[l];function p(c,i,r,y,C,d){return n(),a("div",null,t)}const g=s(o,[["render",p]]);export{h as __pageData,g as default};
