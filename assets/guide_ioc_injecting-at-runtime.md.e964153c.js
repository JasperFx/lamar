import{_ as s,c as n,o as a,a as e}from"./app.8aee9f9c.js";const A=JSON.parse('{"title":"Injecting Services at Runtime","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/injecting-at-runtime.md"}'),t={name:"guide/ioc/injecting-at-runtime.md"},p=e(`<h1 id="injecting-services-at-runtime" tabindex="-1">Injecting Services at Runtime <a class="header-anchor" href="#injecting-services-at-runtime" aria-hidden="true">#</a></h1><p>Lamar&#39;s predecessor <a href="https://structuremap.github.io" target="_blank" rel="noreferrer">StructureMap</a> allowed you to override service registrations in nested containers in a general way. Some .Net application frameworks depend on this functionality to inject some kind of contextual service into a nested container. <a href="http://ASP.Net" target="_blank" rel="noreferrer">ASP.Net</a> Core&#39;s <code>HttpContext</code> is an example. MassTransit&#39;s <a href="https://github.com/MassTransit/MassTransit/blob/develop/src/MassTransit/ConsumeContext.cs" target="_blank" rel="noreferrer">ConsumeContext</a> is another.</p><p>Using that as an example, let&#39;s say that our application framework has this context type that the framework creates and wants to inject directly into nested containers for some kind of operation:</p><p><a id="snippet-sample_executioncontext"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// This class is specific to some kind of short lived </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// process and lives in a nested container</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExecutionContext</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Guid</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Id</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Guid</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NewGuid</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L178-L187" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_executioncontext" title="Start of snippet">anchor</a></sup></p><p>We might well have a service in our code that is resolved from a Lamar container that depends on that <code>ExecutionContext</code> interface:</p><p><a id="snippet-sample_contextusingservice"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ContextUsingService</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ContextUsingService</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ExecutionContext</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        Context </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExecutionContext</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Context</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L164-L176" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_contextusingservice" title="Start of snippet">anchor</a></sup></p><p>The first thing we have to do is make a registration in Lamar <strong>upfront</strong> that lets the container know that <code>ExecutionContext</code> is going to be injected at runtime:</p><p><a id="snippet-sample_container-with-injectable"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Injectable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ExecutionContext</span><span style="color:#89DDFF;">&gt;();</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L119-L123" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_container-with-injectable" title="Start of snippet">anchor</a></sup></p><p>At runtime, we can inject <code>ExecutionContext</code> like this:</p><p><a id="snippet-sample_injecting-context-to-nested"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExecutionContext</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">nested</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetNestedContainer</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Inject</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L125-L132" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_injecting-context-to-nested" title="Start of snippet">anchor</a></sup></p><p>Finally, when we resolve a service that depends on <code>ExecutionContext</code> from the nested container we built above, we can see that it has a reference to our context object:</p><p><a id="snippet-sample_resolving-using-context"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">service</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> nested</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ContextUsingService</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeSameAs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/inject_to_scope.cs#L135-L140" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_resolving-using-context" title="Start of snippet">anchor</a></sup></p>`,22),o=[p];function l(c,r,i,C,y,F){return a(),n("div",null,o)}const d=s(t,[["render",l]]);export{A as __pageData,d as default};
