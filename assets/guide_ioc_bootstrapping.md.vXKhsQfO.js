import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.B2AeMXkx.js";const d=JSON.parse('{"title":"Bootstrapping a Container","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/bootstrapping.md","filePath":"guide/ioc/bootstrapping.md"}'),e={name:"guide/ioc/bootstrapping.md"};function p(l,s,r,h,k,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="bootstrapping-a-container" tabindex="-1">Bootstrapping a Container <a class="header-anchor" href="#bootstrapping-a-container" aria-label="Permalink to &quot;Bootstrapping a Container&quot;">â€‹</a></h1><p>To configure and bootstrap a Lamar container, you have a couple options. You can create a <code>Container</code> object with inline registrations:</p><p><a id="snippet-sample_bootstrap-inline"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> container</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddTransient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IClock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(); });</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Samples/Bootstrapping.cs#L16-L20" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_bootstrap-inline" title="Start of snippet">anchor</a></sup></p><p>Or pass in a configured <code>ServiceRegistry</code> object as shown below:</p><p><a id="snippet-sample_bootstrap-with-registry"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a Lamar.ServiceRegistry object</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// and define your service registrations</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> registry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ServiceRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use ASP.Net Core style registrations</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// for basic functionality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IClock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddTransient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RedWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Or use StructureMap style registration syntax</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// as an alternative or to use more advanced usage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IClockFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClockFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> container</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(registry);</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Samples/Bootstrapping.cs#L25-L45" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_bootstrap-with-registry" title="Start of snippet">anchor</a></sup></p><p>Lamar&#39;s <code>ServiceRegistry</code> supports a subset of StructureMap&#39;s old <code>Registry</code> class and should be used as a replacement when replacing StructureMap with Lamar. We renamed the class to disambiguate the name from the many other <code>Registry</code> classes in the CLR. <code>ServiceRegistry</code> implements the <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.dependencyinjection.iservicecollection?view=aspnetcore-2.0" target="_blank" rel="noreferrer">IServiceCollection</a> interface from ASP.Net Core. You can also create a Lamar container by passing in an instance of <code>IServiceCollection</code> like you&#39;d get within an ASP.Net Core application.</p>`,10)]))}const g=i(e,[["render",p]]);export{d as __pageData,g as default};
