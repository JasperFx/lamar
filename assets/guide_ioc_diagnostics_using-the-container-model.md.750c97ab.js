import{_ as s,c as a,o as e,a as n}from"./app.8b741b6d.js";const C=JSON.parse('{"title":"Using the Container Model","description":"","frontmatter":{},"headers":[{"level":2,"title":"Querying for Service Types","slug":"querying-for-service-types","link":"#querying-for-service-types","children":[]},{"level":2,"title":"Working with a Service Type","slug":"working-with-a-service-type","link":"#working-with-a-service-type","children":[]},{"level":2,"title":"Finding the Default for a Service Type","slug":"finding-the-default-for-a-service-type","link":"#finding-the-default-for-a-service-type","children":[]},{"level":2,"title":"Finding an Instance by Type and Name","slug":"finding-an-instance-by-type-and-name","link":"#finding-an-instance-by-type-and-name","children":[]},{"level":2,"title":"All Instances for a Service Type","slug":"all-instances-for-a-service-type","link":"#all-instances-for-a-service-type","children":[]},{"level":2,"title":"Testing for Registrations","slug":"testing-for-registrations","link":"#testing-for-registrations","children":[]},{"level":2,"title":"Finding all Possible Implementors of an Interface","slug":"finding-all-possible-implementors-of-an-interface","link":"#finding-all-possible-implementors-of-an-interface","children":[]}],"relativePath":"guide/ioc/diagnostics/using-the-container-model.md"}'),l={name:"guide/ioc/diagnostics/using-the-container-model.md"},t=n(`<h1 id="using-the-container-model" tabindex="-1">Using the Container Model <a class="header-anchor" href="#using-the-container-model" aria-hidden="true">#</a></h1><p>The queryable <code>Container.Model</code> is a power facility to look into your Lamar <code>Container</code> and even to eject previously built services from the Container. The <code>Container.Model</code> represents a <strong>static view of what a <code>Container</code> already has</strong>, and does not account for policies that may allow Lamar to validly discover types that it may encounter later at runtime.</p><h2 id="querying-for-service-types" tabindex="-1">Querying for Service Types <a class="header-anchor" href="#querying-for-service-types" aria-hidden="true">#</a></h2><p>The <a href="/lamar/guide/ioc/diagnostics/what-do-i-have.html">WhatDoIHave()</a> mechanism works by just iterating over the <code>Container.Model.ServiceTypes</code> collection as shown below:</p><p><a id="snippet-sample_find-all-plugin-types-from-the-current-assembly"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PluginTypes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Where</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PluginType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Assembly </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> Assembly</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetExecutingAssembly</span><span style="color:#89DDFF;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Each</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">pluginType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> Debug</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pluginType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PluginType</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L19-L22" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_find-all-plugin-types-from-the-current-assembly" title="Start of snippet">anchor</a></sup></p><h2 id="working-with-a-service-type" tabindex="-1">Working with a Service Type <a class="header-anchor" href="#working-with-a-service-type" aria-hidden="true">#</a></h2><p>The <code>IServiceFamilyConfiguration</code> interface allows you to query and manipulate all the configured Instance&#39;s for a given service type.</p><p>See the entire <a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar/IServiceFamilyConfiguration.cs" target="_blank" rel="noreferrer">IServiceFamilyConfiguration interface here</a>.</p><h2 id="finding-the-default-for-a-service-type" tabindex="-1">Finding the Default for a Service Type <a class="header-anchor" href="#finding-the-default-for-a-service-type" aria-hidden="true">#</a></h2><p>To simply find out what the default concrete type would be for a requested service type, use one of these two methods:</p><p><a id="snippet-sample_find-default-of-plugintype"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Finding the concrete type of the default</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// IDevice service</span></span>
<span class="line"><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DefaultTypeFor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDevice</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DefaultDevice</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Find the configuration model for the default</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// IDevice service</span></span>
<span class="line"><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDevice</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#A6ACCD;">Default</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ReturnedType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">DefaultDevice</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L24-L34" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_find-default-of-plugintype" title="Start of snippet">anchor</a></sup></p><h2 id="finding-an-instance-by-type-and-name" tabindex="-1">Finding an Instance by Type and Name <a class="header-anchor" href="#finding-an-instance-by-type-and-name" aria-hidden="true">#</a></h2><p>Use this syntax to find information about an Instance in a given service type and name:</p><p><a id="snippet-sample_find-named-instance-by-type-and-name"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">redRule</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Find</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Rule</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Red</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L36-L38" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_find-named-instance-by-type-and-name" title="Start of snippet">anchor</a></sup></p><h2 id="all-instances-for-a-service-type" tabindex="-1">All Instances for a Service Type <a class="header-anchor" href="#all-instances-for-a-service-type" aria-hidden="true">#</a></h2><p>This sample shows how you could iterate or query over all the registered instances for a single service type:</p><p><a id="snippet-sample_query-instances-of-plugintype"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Rule</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#A6ACCD;">Instances</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Each</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Debug</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Description</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L40-L45" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_query-instances-of-plugintype" title="Start of snippet">anchor</a></sup></p><h2 id="testing-for-registrations" tabindex="-1">Testing for Registrations <a class="header-anchor" href="#testing-for-registrations" aria-hidden="true">#</a></h2><p>To troubleshoot or automate testing of Container configuration, you can use code like the sample below to test for the presence of expected configurations:</p><p><a id="snippet-sample_testing-for-registrations"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Is there a default instance for IDevice?</span></span>
<span class="line"><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">HasDefaultImplementationFor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDevice</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Are there any configured instances for IDevice?</span></span>
<span class="line"><span style="color:#A6ACCD;">container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">HasImplementationsFor</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDevice</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L67-L73" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_testing-for-registrations" title="Start of snippet">anchor</a></sup></p><h2 id="finding-all-possible-implementors-of-an-interface" tabindex="-1">Finding all Possible Implementors of an Interface <a class="header-anchor" href="#finding-all-possible-implementors-of-an-interface" aria-hidden="true">#</a></h2><p>Forget about what types are registered for whatever service types and consider this, what if you have an interface called <code>IStartable</code> that just denotes objects that will need to be activated after the container is bootstrapped?</p><p>If our interface is this below:</p><p><a id="snippet-sample_istartable"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IStartable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IDisposable</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/activation_and_interception.cs#L337-L344" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_istartable" title="Start of snippet">anchor</a></sup><a id="snippet-sample_istartable-1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IStartable</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WasStarted</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/container_model_usage.cs#L271-L280" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_istartable-1" title="Start of snippet">anchor</a></sup><a id="snippet-sample_istartable-2"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IStartable</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WasStarted</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Query/ModelIntegrationTester.cs#L188-L196" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_istartable-2" title="Start of snippet">anchor</a></sup></p><p>We could walk through the entire Lamar model and find every registered instance that implements this interface, create each, and call the <code>Start()</code> method like in this code below:</p><p><a id="snippet-sample_calling-startable-start"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">allStartables</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetAllPossible</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IStartable</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToArray</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">startable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> allStartables</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> startable</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/container_model_usage.cs#L194-L200" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_calling-startable-start" title="Start of snippet">anchor</a></sup><a id="snippet-sample_calling-startable-start-1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">allStartables</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetAllPossible</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IStartable</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">allStartables</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToArray</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Each</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Query/ModelIntegrationTester.cs#L102-L106" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_calling-startable-start-1" title="Start of snippet">anchor</a></sup></p><p>I&#39;ve also used this mechanism in automated testing to reach out to all singleton services that may have state to clear out their data between tests.</p>`,47),p=[t];function o(r,c,i,y,F,D){return e(),a("div",null,p)}const h=s(l,[["render",o]]);export{C as __pageData,h as default};
