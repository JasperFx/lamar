import{_ as a,c as r,o,ag as t}from"./chunks/framework.B2AeMXkx.js";const u=JSON.parse('{"title":"LamarCodeGeneration & LamarCompiler","description":"","frontmatter":{},"headers":[],"relativePath":"guide/compilation/index.md","filePath":"guide/compilation/index.md"}'),i={name:"guide/compilation/index.md"};function n(l,e,m,s,d,c){return o(),r("div",null,e[0]||(e[0]=[t('<h1 id="lamarcodegeneration-lamarcompiler" tabindex="-1">LamarCodeGeneration &amp; LamarCompiler <a class="header-anchor" href="#lamarcodegeneration-lamarcompiler" aria-label="Permalink to &quot;LamarCodeGeneration &amp; LamarCompiler&quot;">â€‹</a></h1><p>Underneath Lamar the IoC container is a standalone library named <code>LamarCodeGeneration</code> that can be used by itself as a code generation and Lambda compilation tool. As of Lamar v3.0, there&#39;s also a separate library called <code>LamarCompiler</code> that is a tiny helper to do in memory compilation of C# via Roslyn. The <a href="https://jasperfx.github.io" target="_blank" rel="noreferrer">Jasper application framework</a> heavily uses this capability as its <a href="https://jeremydmiller.com/2018/01/16/introducing-bluemilk-structuremaps-replacement-jaspers-special-sauce/" target="_blank" rel="noreferrer">&quot;Special Sauce&quot;</a> (Lamar was originally built under the project name &quot;BlueMilk&quot;). See also <a href="https://jeremydmiller.com/2018/05/16/roslyn-powered-code-weaving-middleware/" target="_blank" rel="noreferrer">Roslyn Powered Code Weaving Middleware</a> for more information about how Jasper uses Lamar for its efficient middleware strategy.</p>',2)]))}const f=a(i,[["render",n]]);export{u as __pageData,f as default};
