import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.B2AeMXkx.js";const c=JSON.parse('{"title":"Lamar Diagnostics","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/diagnostics/index.md","filePath":"guide/ioc/diagnostics/index.md"}'),e={name:"guide/ioc/diagnostics/index.md"};function l(h,s,p,r,k,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="lamar-diagnostics" tabindex="-1">Lamar Diagnostics <a class="header-anchor" href="#lamar-diagnostics" aria-label="Permalink to &quot;Lamar Diagnostics&quot;">â€‹</a></h1><p>Like StructureMap before it, one of Lamar&#39;s big differentiators from other IoC tools is its strong support for built in diagnostic tools.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Lamar 15.0 utilizes the <a href="https://github.com/jasperfx/jasperfx" target="_blank" rel="noreferrer">JasperFx library</a> internally that comes with its own command line execution engine, and the former Lamar.Diagnostics Nuget has been completely merged into Lamar itself.</p></div><p><a id="snippet-sample_using-lamar-diagnostics"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Start up your HostBuilder as normal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HostBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UseLamar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // This adds a Container validation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // to the Oakton &quot;check-env&quot; command</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            services.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CheckLamarConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // And the rest of your application&#39;s</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // DI registrations.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            services.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IncludeRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestClassRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // This one was problematic with oddball type names,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // so it&#39;s in our testing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            services.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AddHttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call this method to start your application</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // with JasperFx handling the command line parsing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // and delegation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // This will be included with your reference to Lamar,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // no other Nugets are necessary!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RunJasperFxCommands</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/LamarDiagnosticsWithNetCore3Demonstrator/Program.cs#L15-L42" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-lamar-diagnostics" title="Start of snippet">anchor</a></sup></p><p>Once the <code>Lamar.Diagnostics</code> NuGet is installed to your application and you&#39;ve opted into Oakton to handle command line options, typing this command at the root of your project will show all the installed commands:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span></span></code></pre></div><p>If <code>Lamar.Diagnostics</code> is installed, you should see three lamar related commands as shown below:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commands:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">---------------------------------------------------------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check-env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Execute</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> environment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> against</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Writes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> description</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> running</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            help</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> the</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commands</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  lamar-scanning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Runs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Lamar&#39;s type scanning diagnostics</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  lamar-services -&gt; List all the registered Lamar services</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  lamar-validate -&gt; Runs all the Lamar container validations</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              run -&gt; Runs the configured AspNetCore application</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">---------------------------------------------------------------------------------------------</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>All the diagnostic commands expose an <code>-e</code> flag to control the host environment name of the running application.</p></div><h2 id="validating-the-container-configuration" tabindex="-1">Validating the Container Configuration <a class="header-anchor" href="#validating-the-container-configuration" aria-label="Permalink to &quot;Validating the Container Configuration&quot;">â€‹</a></h2><p>To validate the Lamar configuration of your system, use this command from the root of your project:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-validate</span></span></code></pre></div><p>Running that command is going to:</p><ol><li>Bootstrap your application which sets up the Lamar container</li><li>Checks that every service registration can find all necessary dependencies</li><li>If running in the default &quot;full&quot; mode, tries to build all known registrations one by one</li><li>If running in the default &quot;full&quot; mode, executes all the <a href="/lamar/guide/ioc/diagnostics/environment-tests.html">Lamar environment checks</a> in your system</li><li>Write out the stack traces of any and all exceptions that Lamar encounters</li></ol><p>If everything checks out, you&#39;ll get this friendly output in green:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Lamar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registrations</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> all</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> good!</span></span></code></pre></div><p>Otherwise, you&#39;re going to get a whole lot of .Net exception stack traces with explanatory text about what registrations or environment tests failed.</p><p>The command itself will return a non zero exit code, so if <code>lamar-validate</code> is used within your automated build, it will fail your build if the validation fails <strong>by design</strong>.</p><p>To run a faster check of only the configuration, use the flag shown below:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-validate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ConfigOnly</span></span></code></pre></div><h2 id="analyzing-the-lamar-configuration" tabindex="-1">Analyzing the Lamar Configuration <a class="header-anchor" href="#analyzing-the-lamar-configuration" aria-label="Permalink to &quot;Analyzing the Lamar Configuration&quot;">â€‹</a></h2><p>The old Lamar/StructureMap <em>WhatDoIHave()</em> diagnostic report is available from the command line in an enhanced command like this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span></span></code></pre></div><p>This command makes heavy usage of the <a href="https://spectresystems.github.io/spectre.console" target="_blank" rel="noreferrer">Spectre.Console</a> library to format the output in a much more readable way than the old, purely textual version.</p><p>The output is somewhat ellided to eliminate some of the noise registrations added by <code>HostBuilder</code> like <code>IOptions&lt;T&gt;</code> or <code>ILogger&lt;T&gt;</code>. To see <strong>everything</strong>, use the verbose flag:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --verbose</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>All service registration filtering is done by the <strong>service type</strong> rather than the <strong>implementation type</strong></p></div><p>To filter the results to zero in on specific type registrations, you can filter by assembly:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --assembly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> YourAssemblyName</span></span></code></pre></div><p>or by namespace (and this is inclusive):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --namespace</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NamespaceName</span></span></code></pre></div><p>or by a specific type name:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> YourTypeName</span></span></code></pre></div><p>The filtering by type name is case insensitive, and looks for type names that contain your filter. So looking for <code>--type options</code> will find every possible registration of <code>IOptions&lt;T&gt;</code> for example.</p><p>To get more detailed information about exactly how Lamar is building these service registrations, use this option:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build-plans</span></span></code></pre></div><p>Lastly, you can save off the output of the <code>lamar-services</code> command to either a text file:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build-plans</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services.txt</span></span></code></pre></div><p>or keep the formatting in HTML by naming the file with either an <code>htm</code> or <code>html</code> file extension:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-services</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --build-plans</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> services.htm</span></span></code></pre></div><h2 id="type-scanning-diagnostics" tabindex="-1">Type Scanning Diagnostics <a class="header-anchor" href="#type-scanning-diagnostics" aria-label="Permalink to &quot;Type Scanning Diagnostics&quot;">â€‹</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>The type scanning mechanics are somewhat brittle when there are dependency issues in your application, and this command can help you spot where problems may be occurring.</p></div><p>The <a href="/lamar/guide/ioc/diagnostics/type-scanning.html">type scanning</a> can be accessed at the command line with this command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lamar-scanning</span></span></code></pre></div><h2 id="programmatic-diagnostics" tabindex="-1">Programmatic Diagnostics <a class="header-anchor" href="#programmatic-diagnostics" aria-label="Permalink to &quot;Programmatic Diagnostics&quot;">â€‹</a></h2><p>The older, programmatic usages of Lamar diagnostics are described in other sections.</p>`,48)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
