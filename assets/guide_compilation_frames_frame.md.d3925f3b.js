import{_ as s,c as a,o as n,a as l}from"./app.8b741b6d.js";const A=JSON.parse('{"title":"Building Custom Frames","description":"","frontmatter":{},"headers":[{"level":2,"title":"Creating a Variable within a Frame","slug":"creating-a-variable-within-a-frame","link":"#creating-a-variable-within-a-frame","children":[]},{"level":2,"title":"Finding Dependent Variables","slug":"finding-dependent-variables","link":"#finding-dependent-variables","children":[]}],"relativePath":"guide/compilation/frames/frame.md"}'),o={name:"guide/compilation/frames/frame.md"},p=l(`<h1 id="building-custom-frames" tabindex="-1">Building Custom Frames <a class="header-anchor" href="#building-custom-frames" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>If you&#39;re going to get into LamarCodeGeneration&#39;s model, you probably want to be familiar and comfortable with both string interpolation in C# and the recent <code>nameof</code> operator.</p></div><p>To build a custom frame, you first need to create a new class that subclasses <code>Frame</code>, with these other more specific subclasses to start from as well:</p><ul><li><code>SyncFrame</code> - a frame that generates purely synchronous code</li><li><code>AsyncFrame</code> - a frame that has at least one <code>await</code> call in the code generated</li></ul><p>The one thing you absolutely have to do when you create a new <code>Frame</code> class is to override the <code>GenerateCode()</code> method. Take this example from Lamar itself for a frame that just injects a comment into the generated code:</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CommentFrame</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SyncFrame</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_commentText</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CommentFrame</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">commentText</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _commentText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> commentText</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GenerateCode</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GeneratedMethod</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISourceWriter</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">writer</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteComment</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_commentText</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// It&#39;s on you to call through to a possible next</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// frame to let it generate its code</span></span>
<span class="line"><span style="color:#A6ACCD;">        Next</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">GenerateCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> writer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>A couple things to note about the <code>GenerateCode()</code> method:</p><ul><li>The <code>GeneratedMethod</code> will tell you information about the new method being generated like the return type and whether or not the method returns a <code>Task</code> or is marked with the <code>async</code> keyword.</li><li>You use the <code>ISourceWriter</code> argument to write new code into the generated method</li><li>It&#39;s your responsibility to call the <code>Next?.GenerateCode()</code> method to give the next frame a chance to write its code. <strong>Don&#39;t forget to do this step</strong>.</li></ul><p>Inside a custom frame, you can also nest the code from the frames following yours in a method. See this frame from Lamar itself that calls a &quot;no arg&quot; constructor on a concrete class and returns a variable. In the case of a class that implements <code>IDisposable</code>, it should write a C# <code>using</code> block that surrounds the inner code:</p><p><a id="snippet-sample_noargcreationframe"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">NoArgCreationFrame</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SyncFrame</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NoArgCreationFrame</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">concreteType</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// By creating the variable this way, we&#39;re</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// marking the variable as having been created</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// by this frame</span></span>
<span class="line"><span style="color:#A6ACCD;">        Output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Variable</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">concreteType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">this</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Variable</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Output</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// You have to override this method</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GenerateCode</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GeneratedMethod</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISourceWriter</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">writer</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">creation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$&quot;</span><span style="color:#C3E88D;">var </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Usage</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> = new </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VariableType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FullNameInCode</span><span style="color:#89DDFF;">()}</span><span style="color:#C3E88D;">()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VariableType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CanBeCastTo</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDisposable</span><span style="color:#89DDFF;">&gt;())</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// there is an ISourceWriter shortcut for this, but this makes</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// a better code demo;)</span></span>
<span class="line"><span style="color:#A6ACCD;">            writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">$&quot;</span><span style="color:#C3E88D;">BLOCK:using (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">creation</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            Next</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">GenerateCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> writer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FinishBlock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">creation </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            Next</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">GenerateCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> writer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/NoArgConstructor.cs#L9-L44" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_noargcreationframe" title="Start of snippet">anchor</a></sup></p><h2 id="creating-a-variable-within-a-frame" tabindex="-1">Creating a Variable within a Frame <a class="header-anchor" href="#creating-a-variable-within-a-frame" aria-hidden="true">#</a></h2><p>If the code generated by a <code>Frame</code> creates a new <code>Variable</code> in the generated code, it should set itself as the creator of that variable. You can do that by either passing a frame into a variable as its creator like this line from the <code>NoArgCreationFrame</code> shown above:</p><p><a id="snippet-sample_noargcreationframector"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NoArgCreationFrame</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">concreteType</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// By creating the variable this way, we&#39;re</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// marking the variable as having been created</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// by this frame</span></span>
<span class="line"><span style="color:#A6ACCD;">    Output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Variable</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">concreteType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">this</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/NoArgConstructor.cs#L48-L56" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_noargcreationframector" title="Start of snippet">anchor</a></sup></p><p>Otherwise, you could also have written that code like this:</p><p><a id="snippet-sample_noargcreationframector2"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NoArgCreationFrame</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">concreteType</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// By creating the variable this way, we&#39;re</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// marking the variable as having been created</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// by this frame</span></span>
<span class="line"><span style="color:#A6ACCD;">    Output </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">concreteType</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/NoArgConstructor.cs#L59-L67" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_noargcreationframector2" title="Start of snippet">anchor</a></sup></p><h2 id="finding-dependent-variables" tabindex="-1">Finding Dependent Variables <a class="header-anchor" href="#finding-dependent-variables" aria-hidden="true">#</a></h2><p>The other main thing you need to know is how to locate <code>Variable</code> objects your <code>Frame</code> needs to use. You accomplish that by overriding the <code>FindVariables()</code> method. Take this example below that is used within Lamar to generate code that resolves a service by calling a <a href="https://en.wikipedia.org/wiki/Service_locator_pattern" target="_blank" rel="noreferrer">service locator</a> method on a Lamar <code>Scope</code> (a nested container most likely) object:</p><p><a id="snippet-sample_getinstanceframe"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GetInstanceFrame</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SyncFrame</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IResolverFrame</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MethodInfo</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_resolveMethod</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">        ReflectionHelper</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetMethod</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Instance</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">(null));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Variable</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">_scope</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetInstanceFrame</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Instance</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        Variable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServiceVariable</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">this</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ServiceDeclaration</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ServiceType</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        _name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServiceVariable</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Variable</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WriteExpressions</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">LambdaDefinition</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">definition</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">scope</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> definition</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scope</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">expr</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> definition</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ExpressionFor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Variable</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">instance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Variable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Instance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">call</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Expression</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Call</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Expression</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Constant</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> _resolveMethod</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> scope</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">assign</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Expression</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Assign</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">expr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Expression</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Convert</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Variable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VariableType</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        definition</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">assign</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Next </span><span style="color:#F78C6C;">is</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">InvalidCastException</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">$&quot;{</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GetInstanceFrame</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">GetFullName</span><span style="color:#89DDFF;">()}</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">nameof</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Next</span><span style="color:#89DDFF;">)}</span><span style="color:#C3E88D;"> must not be null.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GenerateCode</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GeneratedMethod</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISourceWriter</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">writer</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">$&quot;</span><span style="color:#C3E88D;">var </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Variable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Usage</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> = </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">_scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Usage</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">nameof</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Scope</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GetInstance</span><span style="color:#89DDFF;">)}</span><span style="color:#C3E88D;">&lt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">Variable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">VariableType</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FullNameInCode</span><span style="color:#89DDFF;">()}</span><span style="color:#C3E88D;">&gt;(</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">_name</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">);</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        Next</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">GenerateCode</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">method</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> writer</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">override</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Variable</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FindVariables</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IMethodVariables</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">chain</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _scope </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> chain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FindVariable</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Scope</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> _scope</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar/IoC/Frames/GetInstanceFrame.cs#L14-L67" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_getinstanceframe" title="Start of snippet">anchor</a></sup></p><p>When you write a <code>FindVariables()</code> method, be sure to keep a reference to any variable you need for later, and return that variable as part of the enumeration from this method. Lamar uses the dependency relationship between frames, the variables they depend on, and the creators of those variables to correctly order and fill in any missing frames prior to generating code through the <code>GenerateCode()</code> method.</p>`,27),e=[p];function t(r,c,y,D,F,C){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
