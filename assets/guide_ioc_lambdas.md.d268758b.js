import{_ as s,c as a,o as n,a as e}from"./app.8b741b6d.js";const u=JSON.parse('{"title":"Building Objects with Lambdas","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/lambdas.md"}'),o={name:"guide/ioc/lambdas.md"},l=e(`<h1 id="building-objects-with-lambdas" tabindex="-1">Building Objects with Lambdas <a class="header-anchor" href="#building-objects-with-lambdas" aria-hidden="true">#</a></h1><p>Instead of allowing Lamar to build objects directly, you can give a Lamar <code>Container</code> a <a href="https://msdn.microsoft.com/en-us/library/bb397687.aspx" target="_blank" rel="noreferrer">Lambda function</a> that can be called to create an object at resolution time.</p><p>Using NHibernate&#39;s <a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/ISession.cs" target="_blank" rel="noreferrer"><code>ISession</code></a> as an example of an object that typically has to be built by using an <a href="https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate/ISessionFactory.cs" target="_blank" rel="noreferrer"><code>ISessionFactory</code></a> object:</p><p><a id="snippet-sample_nhibernate-isession-factory"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISession</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISessionFactory</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">ISession</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Samples/TalkSamples.cs#L52-L59" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_nhibernate-isession-factory" title="Start of snippet">anchor</a></sup></p><p>If we want to allow Lamar to control the <code>ISession</code> lifecycle and creation, we have to register a Lambda function as the means of creating <code>ISession</code> as shown in this example below:</p><p><a id="snippet-sample_sessionfactoryregistry"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SessionFactoryRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Registry</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Let&#39;s not worry about how ISessionFactory is built</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// in this example</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SessionFactoryRegistry</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">ISessionFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">factory</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISessionFactory</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">factory</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Build ISession with a lambda:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISession</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Build ISession from ISessionFactory</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// To resolve ISession, I first pull out</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// ISessionFactory from the IContext and use that</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// to build a new ISession. </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISessionFactory</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Samples/TalkSamples.cs#L61-L80" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_sessionfactoryregistry" title="Start of snippet">anchor</a></sup></p><p>Lambda registrations can be done with any of the following four signatures:</p><ol><li><code>(Expression&lt;Func&lt;IContext, T&gt;&gt; builder)</code> -- a simple, one line Lambda to build <code>T</code> using <code>IContext</code></li><li><code>(Expression&lt;Func&lt;T&gt;&gt; func)</code> -- a simple, one line Lambda to build <code>T</code></li><li><code>(string description, Func&lt;IContext, T&gt; builder)</code> -- use <code>IContext</code> in your builder Lambda with a user-supplied description for diagnostics</li><li><code>(string description, Func&lt;T&gt; builder)</code> -- Supply a complex <code>Func&lt;T&gt;</code> with a user-supplied description for diagnostics</li></ol><p><strong>Be very wary of the difference between legal <code>Expression&#39;s</code> and more complicated Lambda&#39;s that will need to be <code>Func&#39;s</code>.</strong> It likely doesn&#39;t matter to you the user, but it unfortunately does to Lamar and .NET itself. If you need to use a more complex <code>Func</code>, you will have to supply a diagnostic description.</p>`,13),t=[l];function p(c,r,i,y,F,d){return n(),a("div",null,t)}const C=s(o,[["render",p]]);export{u as __pageData,C as default};
