import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.B2AeMXkx.js";const c=JSON.parse('{"title":"Try Getting an Optional Service by Service Type and Name","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/resolving/try-getting-an-optional-service-by-service-type-and-name.md","filePath":"guide/ioc/resolving/try-getting-an-optional-service-by-service-type-and-name.md"}'),t={name:"guide/ioc/resolving/try-getting-an-optional-service-by-service-type-and-name.md"};function p(l,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="try-getting-an-optional-service-by-service-type-and-name" tabindex="-1">Try Getting an Optional Service by Service Type and Name <a class="header-anchor" href="#try-getting-an-optional-service-by-service-type-and-name" aria-label="Permalink to &quot;Try Getting an Optional Service by Service Type and Name&quot;">â€‹</a></h1><p>Just use the <code>IContainer.TryGetInstance&lt;T&gt;(name)</code> or <code>IContainer.TryGetInstance(Type pluginType, string name)</code> method as shown below:</p><p><a id="snippet-sample_TryGetInstanceViaNameAndGeneric_ReturnsInstance_WhenTypeFound"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TryGetInstanceViaNameAndGeneric_ReturnsInstance_WhenTypeFound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addColorInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addColorInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addColorInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;Orange&quot; exists, so an object should be returned</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> instance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TryGetInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    instance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShouldBeOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ColorRule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/ContainerTester.cs#L268-L281" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_TryGetInstanceViaNameAndGeneric_ReturnsInstance_WhenTypeFound" title="Start of snippet">anchor</a></sup></p>`,5)]))}const E=i(t,[["render",p]]);export{c as __pageData,E as default};
