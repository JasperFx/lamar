import{_ as s,c as n,o as a,a as e}from"./app.8b741b6d.js";const C=JSON.parse('{"title":"Generating Code with ISourceWriter","description":"","frontmatter":{},"headers":[{"level":2,"title":"The Basics","slug":"the-basics","link":"#the-basics","children":[]},{"level":2,"title":"Advanced Usages","slug":"advanced-usages","link":"#advanced-usages","children":[]}],"relativePath":"guide/compilation/source-writer.md"}'),l={name:"guide/compilation/source-writer.md"},o=e(`<h1 id="generating-code-with-isourcewriter" tabindex="-1">Generating Code with ISourceWriter <a class="header-anchor" href="#generating-code-with-isourcewriter" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>As of Lamar v3.0, all of the code compilation is contained in the LamarCodeGeneration NuGet, and can be used independently of Lamar itself.</p></div><p>This code was originally written and proven out in the related <a href="https://jasperfx.github.io/marten" target="_blank" rel="noreferrer">Marten</a> and described in a post titled <a href="https://jeremydmiller.com/2015/11/11/using-roslyn-for-runtime-code-generation-in-marten/" target="_blank" rel="noreferrer">Using Roslyn for Runtime Code Generation in Marten</a>. This code was ripped out of Marten itself, but it&#39;s happily running now in Lamar a couple years later.</p><p>Lamar provides the <code>LamarCodeGeneration.ISourceWriter</code> service -- and a lot of related extension methods -- to help write common code constructs and maintain legible code indention just like you&#39;d use if you were writing the code in an editor or IDE.</p><h2 id="the-basics" tabindex="-1">The Basics <a class="header-anchor" href="#the-basics" aria-hidden="true">#</a></h2><p>To dip our toes into source generation, let&#39;s write a simple method to a string that would just write out &quot;Hello&quot; to the console:</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">writer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SourceWriter</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">@&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">BLOCK:public void SayHello()</span></span>
<span class="line"><span style="color:#C3E88D;">Console.WriteLine(&#39;Hello&#39;);</span></span>
<span class="line"><span style="color:#C3E88D;">END</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Replace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Code</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span></code></pre></div><p>After that code, the value of the <code>SourceWriter.Code()</code> method is this text:</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Go</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    Console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>A few notes on what <code>SourceWriter.Write()</code> is doing:</p><ul><li>Starting a line with <em>BLOCK:</em> tells Lamar to write an open bracket &#39;{&#39; on the next line of code and to increment the leading spaces for subsequent lines</li><li>The <code>Write()</code> method is processing each line in the text one at a time, so the call to <code>Console.WriteLine(&quot;Hello&quot;)</code> would be indented because it is inside a code block for the method</li><li>The <em>END</em> text tells Lamar to write a closing &#39;}&#39; bracket on the next line, then decrement the leading spaces for the next lines of code</li></ul><p>Other basic method usages are shown below:</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">writer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SourceWriter</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Write an empty line into the code </span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">BlankLine</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Writes a single line into the code</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// with the proper indention. Does NOT</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// respect the BLOCK: and END directives</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteLine</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">// A comment</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Writes a closing &#39;}&#39; character into the </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// next line and decrements the leading space</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// indention for the following lines of code</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FinishBlock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre></div><h2 id="advanced-usages" tabindex="-1">Advanced Usages <a class="header-anchor" href="#advanced-usages" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>All the usages in this section are from extension methods in the <code>Lamar.Compilation</code> namespace</p></div><p>Here are some of the advanced usages of <code>ISourceWriter</code>:</p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">writer</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SourceWriter</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Add &quot;using [namespace]; statements</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UsingNamespace</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Console</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">Namespace</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UsingNamespace</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IOperation</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Namespace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GeneratedCode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Write new classes and code within the namespace</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FinishBlock</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Helper to write using blocks in C# code</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">UsingBlock</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">var conn = new SqlConnection()</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">w</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    w</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Write</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">conn.Open();</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// other statements</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Write a comment text into the code at the correct indention</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// level</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WriteComment</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Some message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Start the declaration of a new public class named &quot;MyClass&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// that implements the IDisposable interface</span></span>
<span class="line"><span style="color:#A6ACCD;">writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">StartClass</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MyClass</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IDisposable</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div>`,17),t=[o];function p(c,r,i,F,D,y){return a(),n("div",null,t)}const A=s(l,[["render",p]]);export{C as __pageData,A as default};
