import{_ as s,c as n,o as a,a as l}from"./app.8aee9f9c.js";const A=JSON.parse('{"title":"Auto-Registration and Conventions","description":"","frontmatter":{},"headers":[{"level":2,"title":"ServiceRegistry.Scan()","slug":"serviceregistry-scan","link":"#serviceregistry-scan","children":[]},{"level":2,"title":"Scan the Calling Assembly","slug":"scan-the-calling-assembly","link":"#scan-the-calling-assembly","children":[]},{"level":2,"title":"Search for Assemblies on the File System","slug":"search-for-assemblies-on-the-file-system","link":"#search-for-assemblies-on-the-file-system","children":[]},{"level":2,"title":"Excluding Types","slug":"excluding-types","link":"#excluding-types","children":[]},{"level":2,"title":"Custom Registration Conventions","slug":"custom-registration-conventions","link":"#custom-registration-conventions","children":[]},{"level":2,"title":"The Default ISomething/Something Convention","slug":"the-default-isomething-something-convention","link":"#the-default-isomething-something-convention","children":[]},{"level":2,"title":"Registering the Single Implementation of an Interface","slug":"registering-the-single-implementation-of-an-interface","link":"#registering-the-single-implementation-of-an-interface","children":[]},{"level":2,"title":"Register all Concrete Types of an Interface","slug":"register-all-concrete-types-of-an-interface","link":"#register-all-concrete-types-of-an-interface","children":[]},{"level":2,"title":"Generic Types","slug":"generic-types","link":"#generic-types","children":[]},{"level":2,"title":"Register Concrete Types against the First Interface","slug":"register-concrete-types-against-the-first-interface","link":"#register-concrete-types-against-the-first-interface","children":[]},{"level":2,"title":"Look for Registries","slug":"look-for-registries","link":"#look-for-registries","children":[]}],"relativePath":"guide/ioc/registration/auto-registration-and-conventions.md"}'),p={name:"guide/ioc/registration/auto-registration-and-conventions.md"},o=l(`<h1 id="auto-registration-and-conventions" tabindex="-1">Auto-Registration and Conventions <a class="header-anchor" href="#auto-registration-and-conventions" aria-hidden="true">#</a></h1><p>Lamar has rich support for registering types by scanning assemblies and applying conventional registrations. Between scanning and default conventions, configurations are often just a few lines.</p><p>Also see <a href="/lamar/guide/ioc/diagnostics/type-scanning.html">type scanning diagnostics</a> for help in understanding the assembly scanning behavior in your system.</p><h2 id="serviceregistry-scan" tabindex="-1">ServiceRegistry.Scan() <a class="header-anchor" href="#serviceregistry-scan" aria-hidden="true">#</a></h2><p>Assembly scanning operations are defined by the <code>ServiceRegistry.Scan()</code> method demonstrated below:</p><p><a id="snippet-sample_basicscanning"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BasicScanning</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServiceRegistry</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BasicScanning</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Declare which assemblies to scan</span></span>
<span class="line"><span style="color:#A6ACCD;">            _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Assembly</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Lamar.Testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssemblyContainingType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWidget</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Filter types</span></span>
<span class="line"><span style="color:#A6ACCD;">            _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Exclude</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Contains</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Bad</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// A custom registration convention</span></span>
<span class="line"><span style="color:#A6ACCD;">            _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Convention</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MySpecialRegistrationConvention</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Built in registration conventions</span></span>
<span class="line"><span style="color:#A6ACCD;">            _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddAllTypesOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWidget</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">NameBy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Replace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Widget</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">            _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/Examples/SetterExamples.cs#L131-L156" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_basicscanning" title="Start of snippet">anchor</a></sup></p><p>Please note (because I&#39;ve been asked this several times over the years) that each call to <code>ServiceRegistry.Scan()</code> is an entirely atomic operation that has no impact on previous or subsequent calls.</p><p>Any given call to <code>ServiceRegistry.Scan()</code> consists of three different things:</p><ol><li>One or more assemblies to scan for types</li><li>One or more registration conventions</li><li>Optionally, set filters to only include certain types or exclude other types from being processed by the scanning operation</li></ol><h2 id="scan-the-calling-assembly" tabindex="-1">Scan the Calling Assembly <a class="header-anchor" href="#scan-the-calling-assembly" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>If you are having any issues with the type scanning using the <code>TheCallingAssembly()</code> method, just replace that call with an explicit <code>Assembly(&quot;assembly name&quot;)</code> or <code>AssemblyContainingType&lt;T&gt;()</code> call instead of relying on Lamar to walk up the call stack to determine the entry assembly.</p></div><p>One of the easiest ways to register types is by scanning the assembly your registry is placed in.</p><p><strong>Note</strong> if you have other registries, Lamar will not automatically find them.</p><p><a id="snippet-sample_scan-calling-assembly"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scan_but_ignore_registries_by_default</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    TestingRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasUsed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeFalse</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/AssemblyScannerTester.cs#L190-L199" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_scan-calling-assembly" title="Start of snippet">anchor</a></sup></p><h2 id="search-for-assemblies-on-the-file-system" tabindex="-1">Search for Assemblies on the File System <a class="header-anchor" href="#search-for-assemblies-on-the-file-system" aria-hidden="true">#</a></h2><p>Lamar provides facilities for registering types by finding assemblies in the application bin path:</p><p><a id="snippet-sample_scan-filesystem"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scan_all_assemblies_in_a_folder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssembliesFromPath</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">assemblyScanningFolder</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IInterfaceInWidget5</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWorker</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldNotHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDefinedInExe</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scan_all_assemblies_in_application_base_directory</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssembliesFromApplicationBaseDirectory</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IInterfaceInWidget5</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWorker</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldNotHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDefinedInExe</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/AssemblyScannerTester.cs#L145-L164" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_scan-filesystem" title="Start of snippet">anchor</a></sup></p><p>Do note that Lamar 4.0 does not search for <code>.exe</code> files in the assembly search. The Lamar team felt this was problematic and &quot;nobody would ever actually want to do that.&quot; We were wrong, and due to many user requests, you can now <strong>opt in</strong> to scanning <code>.exe</code> files with a new public method on <code>AssemblyScanner</code> shown below:</p><p><a id="snippet-sample_scan-filesystem-for-exe"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scan_all_assemblies_in_a_folder_including_exe</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssembliesAndExecutablesFromPath</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">assemblyScanningFolder</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IInterfaceInWidget5</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWorker</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDefinedInExe</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">scan_all_assemblies_in_application_base_directory_including_exe</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssembliesAndExecutablesFromApplicationBaseDirectory</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IInterfaceInWidget5</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IWorker</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamilyWithSameName</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IDefinedInExe</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/AssemblyScannerTester.cs#L166-L188" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_scan-filesystem-for-exe" title="Start of snippet">anchor</a></sup></p><p>Do be aware that while this technique is very powerful for extensibility, it&#39;s been extremely problematic for some folks in the past. The Lamar team&#39;s recommendation for using this feature is to:</p><ol><li>Make sure you have some kind of filter on the assemblies scanned for performance and predictability reasons. Either a naming convention or filter by an assembly attribute to narrow where Lamar looks</li><li>Get familiar with the new <a href="/lamar/guide/ioc/diagnostics/type-scanning.html">type scanning diagnostics</a> introduced in 4.0;-)</li></ol><p>Behind the scenes, Lamar is using the <code>Assembly.GetExportedTypes()</code> method from the .Net CLR to find types and this mechanism is <strong>very</strong> sensitive to missing dependencies. Again, thanks to the new <a href="/lamar/guide/ioc/diagnostics/type-scanning.html">type scanning diagnostics</a>, you now have some visibility into assembly loading failures that used to be silently swallowed internally.</p><h2 id="excluding-types" tabindex="-1">Excluding Types <a class="header-anchor" href="#excluding-types" aria-hidden="true">#</a></h2><p>Lamar also makes it easy to exclude types, either individually or by namespace. The following examples also show how Lamar can register an assembly by providing a type within that assembly.</p><p>Excluding additional types or namespaces is as easy as calling the corresponding method again.</p><p><a id="snippet-sample_scan-exclusions"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">use_a_single_exclude_of_type</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssemblyContainingType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ExcludeType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldHaveFamily</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IInterfaceInWidget5</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldNotHaveFamily</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">use_a_single_exclude2</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssemblyContainingType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ExcludeNamespace</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">StructureMap.Testing.Widget5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldNotHaveFamily</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IInterfaceInWidget5</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldNotHaveFamily</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">use_a_single_exclude3</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AssemblyContainingType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ExcludeNamespaceContainingType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldNotHaveFamily</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IInterfaceInWidget5</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">shouldNotHaveFamily</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ITypeThatHasAttributeButIsNotInRegistry</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/AssemblyScannerTester.cs#L285-L325" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_scan-exclusions" title="Start of snippet">anchor</a></sup></p><p>You can also ignore specific types through an attribute:</p><p><a id="snippet-sample_using-lamarignore"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// This attribute causes the type scanning to ignore this type</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">LamarIgnore</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BiHolder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBiHolder</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BiHolder</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IBiGrandparent</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grandparent</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/do_not_blow_up_with_bi_directional_dependencies.cs#L63-L74" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-lamarignore" title="Start of snippet">anchor</a></sup></p><h2 id="custom-registration-conventions" tabindex="-1">Custom Registration Conventions <a class="header-anchor" href="#custom-registration-conventions" aria-hidden="true">#</a></h2><p>It&#39;s just not possible (or desirable) for Lamar to include every possible type of auto registration convention users might want, but that&#39;s okay because Lamar allows you to create and use your own conventions through the <code>IRegistrationConvention</code> interface:</p><p><a id="snippet-sample_iregistrationconvention"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">summary</span><span style="color:#89DDFF;font-style:italic;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">///     Used to create custom type scanning conventions</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;/</span><span style="color:#F07178;font-style:italic;">summary</span><span style="color:#89DDFF;font-style:italic;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRegistrationConvention</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScanTypes</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TypeSet</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServiceRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">services</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar/Scanning/Conventions/IRegistrationConvention.cs#L5-L14" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_iregistrationconvention" title="Start of snippet">anchor</a></sup></p><p>Let&#39;s say that you&#39;d like a custom convention that just registers a concrete type against all the interfaces that it implements. You could then build a custom <code>IRegistrationConvention</code> class like the following example:</p><p><a id="snippet-sample_custom-registration-convention"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFoo</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBar</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBaz</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFoo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBar</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBaz</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Custom IRegistrationConvention</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AllInterfacesConvention</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRegistrationConvention</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScanTypes</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TypeSet</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ServiceRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">services</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Only work on concrete types</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> types</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FindTypes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">TypeClassification</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Concretes </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> TypeClassification</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Closed</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                     </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Where</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">BusyGuy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Register against all the interfaces implemented</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// by this concrete class</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">foreach</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">@interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInterfaces</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddTransient</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">@interface</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">use_custom_registration_convention</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// You&#39;re probably going to want to tightly filter</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// the Type&#39;s that are applicable to avoid unwanted</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// registrations</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IncludeNamespaceContainingType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Register the custom policy</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Convention</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AllInterfacesConvention</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IFoo</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IBar</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IBaz</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/custom_registration_convention.cs#L12-L72" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_custom-registration-convention" title="Start of snippet">anchor</a></sup><a id="snippet-sample_custom-registration-convention-1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFoo</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBar</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBaz</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFoo</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBar</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IBaz</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Custom IRegistrationConvention</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AllInterfacesConvention</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRegistrationConvention</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScanTypes</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">TypeSet</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Registry</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">registry</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Only work on concrete types</span></span>
<span class="line"><span style="color:#A6ACCD;">        types</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">FindTypes</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">TypeClassification</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Concretes </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> TypeClassification</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Closed</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Each</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Register against all the interfaces implemented</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// by this concrete class</span></span>
<span class="line"><span style="color:#A6ACCD;">            type</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInterfaces</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">Each</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">@interface</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> registry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">@interface</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">Use</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">use_custom_registration_convention</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// You&#39;re probably going to want to tightly filter</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// the Type&#39;s that are applicable to avoid unwanted</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// registrations</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IncludeNamespaceContainingType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// Register the custom policy</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Convention</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">AllInterfacesConvention</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IFoo</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IBar</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IBaz</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BusyGuy</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/custom_registration_convention.cs#L13-L68" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_custom-registration-convention-1" title="Start of snippet">anchor</a></sup></p><h2 id="the-default-isomething-something-convention" tabindex="-1">The Default ISomething/Something Convention <a class="header-anchor" href="#the-default-isomething-something-convention" aria-hidden="true">#</a></h2><p><em>The Lamar team contains some VB6 veterans who hate Hungarian Notation, but can&#39;t shake the &quot;I&quot; nomenclature.</em></p><p>The &quot;default&quot; convention simply tries to connect concrete classes to interfaces using the I[Something]/[Something] naming convention as shown in this sample:</p><p><a id="snippet-sample_withdefaultconventions"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISpaceship</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Spaceship</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISpaceship</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRocket</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Rocket</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRocket</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">default_scanning_in_action</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Assembly</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Lamar.Testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISpaceship</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Spaceship</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IRocket</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Rocket</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/scanning_samples.cs#L64-L98" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_withdefaultconventions" title="Start of snippet">anchor</a></sup><a id="snippet-sample_withdefaultconventions-1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISpaceship</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Spaceship</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISpaceship</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRocket</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Rocket</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IRocket</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">default_scanning_in_action</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Assembly</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">StructureMap.Testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISpaceship</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Spaceship</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IRocket</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Rocket</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/scanning_samples.cs#L12-L37" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_withdefaultconventions-1" title="Start of snippet">anchor</a></sup></p><p>By default, the behavior is to add new registrations regardless of the existing state of the existing <code>ServiceRegistry</code>. In cases where you use a mix of explicit and conventional registrations, or other cases where you use multiple <code>Scan()</code> operations, you can control the additive registration behavior as shown below:</p><p><a id="snippet-sample_withdefaultconventionsoptions"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Assembly</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Lamar.Testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// This is the default, add all discovered registrations</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// regardless of existing registrations</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">OverwriteBehavior</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Always</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Do not add any registrations if the *ServiceType*</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// is already registered. This will prevent the scanning</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// from overwriting existing default registrations</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">OverwriteBehavior</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Never</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Only add new ImplementationType registrations for </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// the ServiceType. This will prevent duplicate concrete</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// types for the same ServiceType being registered by the</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// type scanning</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">OverwriteBehavior</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NewType</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/scanning_samples.cs#L14-L39" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_withdefaultconventionsoptions" title="Start of snippet">anchor</a></sup></p><div class="tip custom-block"><p class="custom-block-title">INFO</p><p>The service lifetime override behavior was added in Lamar v4.1</p></div><p>Lastly, you can change the default <code>Lifetime</code> of the discovered registrations like this:</p><p><a id="snippet-sample_withdefaultconventionslifetime"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Assembly</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Lamar.Testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Use Scoped as the lifetime</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ServiceLifetime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Scoped</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Mix and match with override behavior</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WithDefaultConventions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">OverwriteBehavior</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Never</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ServiceLifetime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Singleton</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/scanning_samples.cs#L45-L61" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_withdefaultconventionslifetime" title="Start of snippet">anchor</a></sup></p><p>Otherwise, the default registration will be <code>Lifetime.Transient</code>.</p><h2 id="registering-the-single-implementation-of-an-interface" tabindex="-1">Registering the Single Implementation of an Interface <a class="header-anchor" href="#registering-the-single-implementation-of-an-interface" aria-hidden="true">#</a></h2><p>To tell Lamar to automatically register any interface that only has one concrete implementation, use this method:</p><p><a id="snippet-sample_singleimplementationsofinterface"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISong</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TheOnlySong</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISong</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">only_implementation</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SingleImplementationsOfInterface</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISong</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TheOnlySong</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/scanning_samples.cs#L147-L173" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_singleimplementationsofinterface" title="Start of snippet">anchor</a></sup><a id="snippet-sample_singleimplementationsofinterface-1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISong</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TheOnlySong</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ISong</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">only_implementation</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SingleImplementationsOfInterface</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISong</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">TheOnlySong</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/scanning_samples.cs#L74-L95" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_singleimplementationsofinterface-1" title="Start of snippet">anchor</a></sup></p><h2 id="register-all-concrete-types-of-an-interface" tabindex="-1">Register all Concrete Types of an Interface <a class="header-anchor" href="#register-all-concrete-types-of-an-interface" aria-hidden="true">#</a></h2><p>To add all concrete types that can be cast to a named service type, use this syntax:</p><p><a id="snippet-sample_register-all-types-implementing"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WheelOfTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GameOfThrones</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BlackCompany</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register_all_types_of_an_interface</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddAllTypesOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NameBy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToLower</span><span style="color:#89DDFF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddAllTypesOf</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NameBy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToLower</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Instances</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Select</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ImplementationType</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OrderBy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldHaveTheSameElementsAs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">BlackCompany</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GameOfThrones</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WheelOfTime</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetInstance</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blackcompany</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">ShouldBeOfType</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">BlackCompany</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/scanning_samples.cs#L100-L145" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_register-all-types-implementing" title="Start of snippet">anchor</a></sup><a id="snippet-sample_register-all-types-implementing-1"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WheelOfTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GameOfThrones</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">BlackCompany</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">register_all_types_of_an_interface</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">_</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        _</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddAllTypesOf</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// or</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AddAllTypesOf</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">NameBy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> type</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ToLower</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Model</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">For</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IFantasySeries</span><span style="color:#89DDFF;">&gt;()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Instances</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Select</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ReturnedType</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">OrderBy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Name</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldHaveTheSameElementsAs</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">BlackCompany</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">GameOfThrones</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">WheelOfTime</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Acceptance/scanning_samples.cs#L39-L72" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_register-all-types-implementing-1" title="Start of snippet">anchor</a></sup></p><div class="tip custom-block"><p class="custom-block-title">INFO</p><p><code>T</code> does not have to be an interface, it&#39;s all based on the ability to cast a concrete type to <code>T</code></p></div><h2 id="generic-types" tabindex="-1">Generic Types <a class="header-anchor" href="#generic-types" aria-hidden="true">#</a></h2><p>See <a href="/lamar/guide/ioc/generics.html">generic types</a> for an example of using the <code>ConnectImplementationsToTypesClosing</code> mechanism for generic types.</p><h2 id="register-concrete-types-against-the-first-interface" tabindex="-1">Register Concrete Types against the First Interface <a class="header-anchor" href="#register-concrete-types-against-the-first-interface" aria-hidden="true">#</a></h2><p>The last built in registration convention is a mechanism to register all concrete types that implement at least one interface against the first interface that they implement.</p><p><a id="snippet-sample_using-registerconcretetypesagainstthefirstinterface"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">container </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Container</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">o</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        o</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        o</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">RegisterConcreteTypesAgainstTheFirstInterface</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        o</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Exclude</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">t</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span><span style="color:#A6ACCD;"> t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CanBeCastTo</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IGateway</span><span style="color:#89DDFF;">)));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/FirstInterfaceConventionTester.cs#L13-L24" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_using-registerconcretetypesagainstthefirstinterface" title="Start of snippet">anchor</a></sup></p><h2 id="look-for-registries" tabindex="-1">Look for Registries <a class="header-anchor" href="#look-for-registries" aria-hidden="true">#</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Use some caution with this feature. Many users tried to use this feature with StructureMap just to try to break direct assembly coupling, and while it does accomplish that goal, ask yourself if the extra complexity is worth it.</p></div><p>Lamar can automatically include other registries with the<code>LookForRegistries</code> method. This functionality is <em>recursive</em>, meaning that assembly scanning declarations in the <code>ServiceRegistry</code> types discovered through <code>LookForRegistries()</code> will also be processed.</p><p><a id="snippet-sample_scan-for-registries"></a></p><div class="language-cs"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#FFCB6B;">Fact</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Search_for_registries_when_explicitly_told</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Scan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TheCallingAssembly</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LookForRegistries</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    TestingRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">WasUsed</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ShouldBeTrue</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Graph/AssemblyScannerTester.cs#L229-L242" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_scan-for-registries" title="Start of snippet">anchor</a></sup></p>`,97),e=[o];function t(c,r,F,y,i,D){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{A as __pageData,g as default};
