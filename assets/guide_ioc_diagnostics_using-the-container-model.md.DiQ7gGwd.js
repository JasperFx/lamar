import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.B2AeMXkx.js";const c=JSON.parse('{"title":"Using the Container Model","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ioc/diagnostics/using-the-container-model.md","filePath":"guide/ioc/diagnostics/using-the-container-model.md"}'),n={name:"guide/ioc/diagnostics/using-the-container-model.md"};function l(p,s,h,r,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="using-the-container-model" tabindex="-1">Using the Container Model <a class="header-anchor" href="#using-the-container-model" aria-label="Permalink to &quot;Using the Container Model&quot;">​</a></h1><p>The queryable <code>Container.Model</code> is a power facility to look into your Lamar <code>Container</code> and even to eject previously built services from the Container. The <code>Container.Model</code> represents a <strong>static view of what a <code>Container</code> already has</strong>, and does not account for policies that may allow Lamar to validly discover types that it may encounter later at runtime.</p><h2 id="querying-for-service-types" tabindex="-1">Querying for Service Types <a class="header-anchor" href="#querying-for-service-types" aria-label="Permalink to &quot;Querying for Service Types&quot;">​</a></h2><p>The <a href="/lamar/guide/ioc/diagnostics/what-do-i-have.html">WhatDoIHave()</a> mechanism works by just iterating over the <code>Container.Model.ServiceTypes</code> collection as shown below:</p><p><a id="snippet-sample_find-all-plugin-types-from-the-current-assembly"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.Model.PluginTypes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.PluginType.Assembly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Assembly.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetExecutingAssembly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pluginType.PluginType));</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L19-L22" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_find-all-plugin-types-from-the-current-assembly" title="Start of snippet">anchor</a></sup></p><h2 id="working-with-a-service-type" tabindex="-1">Working with a Service Type <a class="header-anchor" href="#working-with-a-service-type" aria-label="Permalink to &quot;Working with a Service Type&quot;">​</a></h2><p>The <code>IServiceFamilyConfiguration</code> interface allows you to query and manipulate all the configured Instance&#39;s for a given service type.</p><p>See the entire <a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar/IServiceFamilyConfiguration.cs" target="_blank" rel="noreferrer">IServiceFamilyConfiguration interface here</a>.</p><h2 id="finding-the-default-for-a-service-type" tabindex="-1">Finding the Default for a Service Type <a class="header-anchor" href="#finding-the-default-for-a-service-type" aria-label="Permalink to &quot;Finding the Default for a Service Type&quot;">​</a></h2><p>To simply find out what the default concrete type would be for a requested service type, use one of these two methods:</p><p><a id="snippet-sample_find-default-of-plugintype"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Finding the concrete type of the default</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// IDevice service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultTypeFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShouldBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Find the configuration model for the default</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// IDevice service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().Default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .ReturnedType.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShouldBe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L24-L34" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_find-default-of-plugintype" title="Start of snippet">anchor</a></sup></p><h2 id="finding-an-instance-by-type-and-name" tabindex="-1">Finding an Instance by Type and Name <a class="header-anchor" href="#finding-an-instance-by-type-and-name" aria-label="Permalink to &quot;Finding an Instance by Type and Name&quot;">​</a></h2><p>Use this syntax to find information about an Instance in a given service type and name:</p><p><a id="snippet-sample_find-named-instance-by-type-and-name"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> redRule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L36-L38" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_find-named-instance-by-type-and-name" title="Start of snippet">anchor</a></sup></p><h2 id="all-instances-for-a-service-type" tabindex="-1">All Instances for a Service Type <a class="header-anchor" href="#all-instances-for-a-service-type" aria-label="Permalink to &quot;All Instances for a Service Type&quot;">​</a></h2><p>This sample shows how you could iterate or query over all the registered instances for a single service type:</p><p><a id="snippet-sample_query-instances-of-plugintype"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">For</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().Instances.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Debug.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i.Instance.Description);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L40-L45" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_query-instances-of-plugintype" title="Start of snippet">anchor</a></sup></p><h2 id="testing-for-registrations" tabindex="-1">Testing for Registrations <a class="header-anchor" href="#testing-for-registrations" aria-label="Permalink to &quot;Testing for Registrations&quot;">​</a></h2><p>To troubleshoot or automate testing of Container configuration, you can use code like the sample below to test for the presence of expected configurations:</p><p><a id="snippet-sample_testing-for-registrations"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Is there a default instance for IDevice?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HasDefaultImplementationFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShouldBeTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Are there any configured instances for IDevice?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HasImplementationsFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IDevice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ShouldBeTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Examples/UsingContainerModel.cs#L67-L73" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_testing-for-registrations" title="Start of snippet">anchor</a></sup></p><h2 id="finding-all-possible-implementors-of-an-interface" tabindex="-1">Finding all Possible Implementors of an Interface <a class="header-anchor" href="#finding-all-possible-implementors-of-an-interface" aria-label="Permalink to &quot;Finding all Possible Implementors of an Interface&quot;">​</a></h2><p>Forget about what types are registered for whatever service types and consider this, what if you have an interface called <code>IStartable</code> that just denotes objects that will need to be activated after the container is bootstrapped?</p><p>If our interface is this below:</p><p><a id="snippet-sample_istartable"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IStartable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WasStarted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/container_model_usage.cs#L271-L280" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_istartable" title="Start of snippet">anchor</a></sup><a id="snippet-sample_istartable-1"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IStartable</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WasStarted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Query/ModelIntegrationTester.cs#L188-L196" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_istartable-1" title="Start of snippet">anchor</a></sup></p><p>We could walk through the entire Lamar model and find every registered instance that implements this interface, create each, and call the <code>Start()</code> method like in this code below:</p><p><a id="snippet-sample_calling-startable-start"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> allStartables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAllPossible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IStartable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">foreach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allStartables) startable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/Lamar.Testing/IoC/Acceptance/container_model_usage.cs#L194-L200" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_calling-startable-start" title="Start of snippet">anchor</a></sup><a id="snippet-sample_calling-startable-start-1"></a></p><div class="language-cs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> allStartables</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> container.Model.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetAllPossible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IStartable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allStartables.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p><sup><a href="https://github.com/JasperFx/lamar/blob/master/src/StructureMap.Testing/Query/ModelIntegrationTester.cs#L102-L106" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_calling-startable-start-1" title="Start of snippet">anchor</a></sup></p><p>I&#39;ve also used this mechanism in automated testing to reach out to all singleton services that may have state to clear out their data between tests.</p>`,45)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
